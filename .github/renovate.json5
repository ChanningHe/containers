{
  "semanticCommits": "enabled",
  "dependencyDashboard": true,
  "dependencyDashboardTitle": "Renovate Dashboard ðŸ¤–",
  "suppressNotifications": ["prIgnoreNotification"],
  "rebaseWhen": "conflicted",
  "commitMessageTopic": "{{depName}}",
  "commitMessageExtra": "to {{newVersion}}",
  "commitMessageSuffix": "",
  "packageRules": [
    {
      "matchDatasources": ["docker"],
      "enabled": true,
      "matchUpdateTypes": ["major", "minor", "patch"]
    },
    {
      "matchDatasources": ["docker"],
      "semanticCommitScope": "images",
      "separateMinorPatch": true
    },
    // add labels according to package and update types
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(images)!: ",
      "labels": ["renovate/image", "dep/major"]
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "labels": ["renovate/image", "dep/minor"]
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "labels": ["renovate/image", "dep/patch"]
    },
    {
      "matchDatasources": ["docker"],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-amd64$",
      "matchPackageNames": ["blakeblackshear/frigate"]
    },
    {
      "matchDatasources": ["docker"],
      "automerge": true,
      "automergeType": "branch",
      "requiredStatusChecks": null,
      "matchUpdateTypes": ["major", "minor", "patch"],
      "matchPackageNames": [
        "codercom/code-server",
        "intel/intel-gpu-plugin",
        "jellyfin/jellyfin",
        "nodered/node-red",
        "esanchezm/prometheus-qbittorrent-exporter",
        "golift/unifi-poller",
        "blakeblackshear/frigate",
        "library/traefik",
        "grafana/grafana",
        "grafana/loki",
        "grafana/promtail",
        "stakater/reloader",
        "weaveworks/kured",
        "library/eclipse-mosquitto",
        "velero/velero",
        "velero/velero-plugin-for-aws",
        "vaultwarden/server",
        "akhilrex/podgrab",
        "b4bz/homer",
        "codercom/code-server",
        "collabora/code",
        "deepquestai/deepstack",
        "deluan/navidrome",
        "dpage/pgadmin4",
        "dperson/openvpn-client",
        "eclipse-mosquitto",
        "emcniece/dockeryourxyzzy",
        "esphome/esphome",
        "fireflyiii/core",
        "flipenergy/focalboard",
        "gabekangas/owncast",
        "golift/unpackerr",
        "gotson/komga",
        "hkotel/mealie",
        "homeassistant/home-assistant",
        "housewrecker/gaps",
        "ixsystems/truecommand",
        "jacobalberty/unifi",
        "jellyfin/jellyfin",
        "jesec/flood",
        "jlesage/handbrake",
        "jlesage/jdownloader-2",
        "linuxserver/airsonic",
        "linuxserver/calibre",
        "linuxserver/calibre-web",
        "linuxserver/deluge",
        "linuxserver/freshrss",
        "linuxserver/grocy",
        "linuxserver/healthchecks",
        "linuxserver/heimdall",
        "linuxserver/lazylibrarian",
        "linuxserver/librespeed",
        "linuxserver/tvheadend",
        "lycheeorg/lychee-laravel",
        "marthoc/deconz",
        "mbentley/omada-controller",
        "mikenye/piaware",
        "nextcloud",
        "nicolaka/netshoot",
        "nodered/node-red",
        "octoprint/octoprint",
        "organizr/organizr",
        "osixia/openldap",
        "osixia/phpldapadmin",
        "owncloud/ocis",
        "photoprism/photoprism",
        "pihole/pihole",
        "postgres",
        "pykmsorg/py-kms",
        "quay.io/oriedge/k8s_gateway",
        "sentriz/gonic",
        "shenxn/protonmail-bridge",
        "sirfragalot/hyperion.ng",
        "stashapp/stash",
        "syncthing/syncthing",
        "tenstartups/ser2sock",
        "thelounge/thelounge",
        "traefik",
        "vaultwarden/server",
        "vexorian/dizquetv",
        "zwavejs/zwavejs2mqtt"

     ]
    }
  ]
}
